<?php
/**
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Academic Free License (AFL 3.0)
 * that is bundled with this package in the file LICENSE_AFL.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/afl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @category    design
 * @package     base_default
 * @copyright   Copyright (c) 2012 Magento Inc. (http://www.magentocommerce.com)
 * @license     http://opensource.org/licenses/afl-3.0.php  Academic Free License (AFL 3.0)
 */
?>

<?php
$_product    = $this->getProduct();
//echo $_product->getId();exit;
$_attributes = Mage::helper('core')->decorateArray($this->getAllowAttributes());
?>
<?php if ($_product->isSaleable() && count($_attributes)):?>
    <dl>
    <?php foreach($_attributes as $_attribute): ?>
        <dt><label class="required"><em>*</em><?php echo $_attribute->getLabel() ?></label></dt>
        <dd<?php if ($_attribute->decoratedIsLast){?> class="last"<?php }?>>
            <div class="input-box">
                <select name="super_attribute[<?php echo $_attribute->getAttributeId() ?>]" id="attribute<?php echo $_attribute->getAttributeId() ?>" class="required-entry super-attribute-select">
                    <option><?php echo $this->__('Choose an Option...') ?></option>
                  </select>
              </div>
        </dd>
    <?php endforeach; ?>
    </dl>
    <script type="text/javascript">
        var spConfig = new Product.Config(<?php echo $this->getJsonConfig() ?>);
        function readCookie(name) {
            var nameEQ = escape(name) + "=";
            var ca = document.cookie.split(';');
            for (var i = 0; i < ca.length; i++) {
                var c = ca[i];
                while (c.charAt(0) == ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) == 0) return unescape(c.substring(nameEQ.length, c.length));
            }
            return null;
        }
        var CheckProductColorOptionId = readCookie("ProductColorOptionId");
        if(CheckProductColorOptionId != null){
            var myarray         = CheckProductColorOptionId.split("-");
            var cookieOption    = myarray[0];
        }
        //we create new function
        var CheckProductColorMainProductIdConfig = readCookie("ProductColorMainProductId");
        if(parseInt(CheckProductColorMainProductIdConfig) == <?php echo $_product->getId();?> && cookieOption !=""){
            spConfig.setInitialState = function(dropdown_id)
            {
                //select dropdown
                var dropdown = $(dropdown_id);
                //remove empty option from dropdown so it is not selectable after initial selection
                dropdown[0].remove();
                //change selections in dropdowns
                for(index = 0; index < dropdown.length; index++)
                {
                    if(dropdown[index].value != "")
                    {
                        //dropdown.selectedIndex = index;
                        if (dropdown.options[index].value == cookieOption) {
                            dropdown.selectedIndex = index;
                            fireEvent(dropdown, 'change');
                            deleteCookie('ProductColorOptionId');
                            deleteCookie('ProductColorMainProductId');
                        }
                    }
                }
                //fire events
                function fireEvent(element,event){
                    //var element = dropdown;
                    //var event = 'change';
                    if(document.createEventObject)
                    {
                        // dispatch for IE
                        var evt = document.createEventObject();
                        return element.fireEvent('on'+event,evt);
                    }
                    else
                    {
                        // dispatch for firefox + others
                        var evt = document.createEvent("HTMLEvents");
                        evt.initEvent(event, true, true );
                        return !element.dispatchEvent(evt);
                    }
                }
            };
            <?php foreach($_attributes as $_attribute): ?>
            spConfig.setInitialState("attribute<?php echo $_attribute->getAttributeId() ?>");
            <?php endforeach; ?>
        }
    </script>
<?php endif;?>
